import matplotlib.pyplot as plt
from skimage import data, io
import numpy as np
from skimage import morphology
from skimage.morphology import binary_erosion, opening
from skimage.color import rgb2gray
from skimage import exposure, filters
from scipy import ndimage as ndi
from scipy.spatial import distance # do obliczenia wspolczynniku Blaira-Bliss-a.
import math

print("START")

image = io.imread('photos/p3.jpg')
image = rgb2gray(image)



th = filters.threshold_otsu(image) # Filtruje obraz w poszukiwaniu progu binaryzacji.
print('Prog binaryzacji: ', th*255)

binary = image > th #Binaryzacja

plt.imshow(binary, cmap='binary')
plt.axis('on')
plt.suptitle('Obraz po binaryzacji')
plt.show()

#################

# Obliczamy zajetosc obiektow na obrazie.

# Wyznaczamy wszystkie punkty danego obiektu.
def getFigure(labelledImage, objNumber):
    
    points = []
    for y in range(labelledImage.shape[0]):
        for x in range(labelledImage.shape[1]):
            if labelledImage[y,x] == objNumber:
                points.append((y,x))

    return points

label_objects2, nb_labels2 = ndi.label(binary)
points = [getFigure(label_objects2, i+1) for i in range(nb_labels2)]

# Rozmiar calego obrazu
full = binary.shape[0] * binary.shape[1]

objectsSize = 0 # Rozmiar obiektow
for point in points:
    objectsSize += len(point)

z = (objectsSize * 100) / full


################3


binary = morphology.opening(binary)
for x in range(40):
    binary = binary_erosion(binary)
    
plt.imshow(binary, cmap='binary')
plt.axis('on')
plt.suptitle('Obraz po erozji')
plt.show()


label_objects, nb_labels = ndi.label(binary)
plt.imshow(label_objects, cmap='hot')
plt.axis('on')
plt.suptitle('Analizowany obraz')
plt.show()

print("Number of objects = " + str(nb_labels))

##################
# RYSOWANIE SRODKU CIEZKOSCI NA OBIEKTACH

def cog(labelledImage, objNumber):
    cx = 0
    cy = 0
    for y in range(labelledImage.shape[0]):
        for x in range(labelledImage.shape[1]):
            if labelledImage[y,x] == objNumber:
                cy = cy + y
                cx = cx + x

    cx = cx / sizes[objNumber]
    cy = cy / sizes[objNumber]

    return int(cy), int(cx)

# Tworzymy maske
sizes = np.bincount(label_objects.ravel())
mask_sizes = sizes > 20
mask_sizes[0] = 0

figures = mask_sizes[label_objects]
#############

cogs = []
for i in range(nb_labels):
    cogs.append(cog(label_objects, i+1))

# Rysujemy na obiektach srodki ciezkosci

def drawMarkers(image, coords):

    image = np.copy(image)
    
    for item in coords:
        y,x = item
        for j in range(y-5, y+6):
            image[j,x] = 0
        for i in range(x-5, x+6):
            image[y,i] = 0
            
    return image

# Wypisujemy na ekran
lo = drawMarkers(label_objects, cogs)
plt.figure(figsize=(10,10))
plt.imshow(lo, cmap='hot')
plt.axis('on')
plt.suptitle('Obraz koncowy')
plt.show()
######################################

# Wyznaczamy srodek ciezkosci
def cog2(points):
    mx=0
    my=0
    for (y,x) in points:
        mx = mx + x
        my = my + y
    mx = mx/len(points)
    my = my/len(points)
    
    return [my, mx]

    


# Wspolczynnik Blaira-Blissa
def computeBB(points):
    
    s = len(points)
    my,mx = cog2(pts)
    
    r = 0
    for point in points:
         r = r + distance.euclidean(point,(my,mx))**2
            
    return s/(math.sqrt(2*math.pi*r))

# Wspolczynnik Fereta
def computeFeret(points):
    
    px = [x for (y,x) in points]
    py = [y for (y,x) in points]
    
    fx = max(px) - min(px)
    fy = max(py) - min(py)
    
    return float(fy)/float(fx) 






